// basic arithmetic
// -32768 // int16 min
// 32767 // int16 max
// 32768 // int16 max + 1

// ——— TODO ———
// - note that "f(_,_ int) -> (TUPLE int int)" and "f(_ int) -> int"
// - change FUNTTYPE to be simply pointers to two types, so we can compare directly with CALL
//

// fun f(_, _ int)
int32(1234)

// -2305843009213693952 // int63 min
// 2305843009213693951 // int63 max
// 2305843009213693952 // int63 max + 1

// -9223372036854775808 // int64 min
// 9223372036854775807 // int64 max
// -9223372036854775808 // int64 min - 1
// 9223372036854775808 // int64 max + 1

// 9223372036854775808 // int64 max + 1
// -9223372036854775808
// 18446744073709551615 // uint
// 1 + -9223372036854775809
// 1 + 2 * -3 / 4
// (1 + 2) * -3 / 4
// 5.0 + 6.7 + 8.0

// variables
// a = 1 * 2
// b = 2
// c = 3 + b

// functions
// fun _(x int, y float, z int) (int, int) {
// 	1, z
// }
// fun _(v [int]) [int] { return v }
// fun _(v int) int { return v }
// fun _ int { 1 }
// fun _ int {}
// fun print(args ...any)

// rest parameters
// fun _(v ...int) ...int { return v }
// fun _(v ...int) [int] { [v] } // create array
// fun _(v [int]) ...int { return ...v } // spread array

// fun f(x, y, z int) (int, int) {
// 	// a = x // VAR
// 	// a, b, c = x, y, z // MULTIVAR
// 	// a, b, c = x // SPREADVAR
// 	return x + y + z
// }

// fun print(... any) void

// // function calls
// print(f(3, 4))
// fun (x, y int) { x * y }(2, 3)


// foo
// 18446744073709551615
// 12345
// 1234567.890123456789

// x := i64(-9223372036854775808)
// x := i32(-2147483648)

// fun tuples {
//     t = (1, 2.0, 3, (4, 5.5))
// }

// fun int16.bitcast(self, v any) int16

// fun f() int                     -- PRIMTYPE
// fun f() (x int)                 -- PARAM
// fun f() (x int, y float, z int) -- TUPLE
// fun f() (int, float, int)       -- TUPLETYPE

// // fun f(a, b int) (x int, y float, z int) {
// fun f(x, y int) (r int, g float, b int) {
// // fun f(x, y int) (int, float, int) {
//     return 1, 2.2, 2
// }
// // print(f())

// fun f(x, y int) { return 1, 2 }
// fun f(x, y int) (int, int) { return 1 } // error: not enough return values
// fun f(x, y int) (int, int) { return 1, 2, 3 } // error: too many return values
// fun f(x, y int) (int, int) { return 1, 2.2 } // error: cannot use value of type float as int
// fun f(x, y int) int { return 2.2 } // error: cannot use value of type float as int

// fun f(v ...int) ...int { return ...v }
// fun f(v ...int) [int] { return v }
// fun f(v [int]) [int] { return v }
// fun f(v int) int { return v }
// --------------------------------------

// fun f(v [int]) [int] { return v }

// fun f(a, b int, v [int]) [int] {}
// f(1, 2, 3, 4, 5); f(1, 2, [3, 4, 5])

// fun f(v ...int) ...int { return v... }
// fun f(x, ... int) [int] { return ... }

// fun example(f fun(int)int) {
//     return fun(x int)int {
//         return x*x
//     }
// }

// fun main {
	// t = (1, 2)
	// a, b, c = 1, 2.3, 4
	// a, b, c = 1, 2 // error: missing value for 'c'
	// a, b = 1 // error: missing value for 'b'
	// a, b, c = (1, 2) // error: not enough values
	// a, b = (1, 2, 3) // error: too many values
	// a, b, c = 1, 2 // error: missing value for 'c'

	// t = (1, 2.2, int8(3)) ; a, b, c = t
	// a = 0; t = (1, 2.2, int8(3)) ; a, b, c = t
	// a, b, c = 1, 2.2, int8(3)
	// a = 0; a, b, c = 1, 2.2, int8(3)
	// a, b, c = (1, 2.2, int8(3))
	// a = 0; a, b, c = (1, 2.2, int8(3))
	// a, b, c = f()
	// return b

	// a, c = 1, 3
	// a, b, c, d = c, 2.1, a, 4

	// a, c = 1, 3
	// a = c

	// a = 1
	// a, b = 11, 2

	// a, b = 1, a // invalid!
	// a = 11
// }
// main()

// fun main() {
//     a := uint(12345)
//     b := int16.bitcast(z)
// }

// TODO: unsigned-int to float conversion:
// fun main(x any) { float(uint(12345)) }

// fun main(x any) {
//     f := float(-12345)
//     i64 := int64(f)
//     u64 := uint64(i64)
//     i16 := int16(u64)
//     u16 := uint16(u64)
//     i12 := int12(u16)
//     u12 := uint12(u16)

//     print(i64); print(u64); print(i16); print(u16); print(i12); print(u12)
// }
// main(3.3)

// // variables
// fun main(x, y int) int {
//     // z := x * y
//     // return z
// }
// // print(main(2))
// // main(2) // TODO: check argument arity

// // variables
// fun f(x int) int {
//     z := x * 2
//     return x + z
// }
// print(f(2))
