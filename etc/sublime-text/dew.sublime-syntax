%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: dew
file_extensions:
  - dew
first_line_match: "#!.*/?dew"
scope: source.dew
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._*&<>\[\]-]'
  directive:  '\b[[:alnum:]_-]+\b'

contexts:
  main:
    - include: global

  global:
    - include: data-section
    - include: imports
    - include: functions
    - include: statements

  statements:
    - include: expressions-early
    - include: initializers
    - include: block
    - match: ^\s*((?!default){{identifier}})(:)(?!=)
      captures:
        1: entity.name.label.dew
        2: punctuation.separator.dew
    - match: \b(type)\s+({{identifier}})\s+(struct)\b
      captures:
        1: storage.type.dew
        2: entity.name.struct.dew
        3: storage.type.dew
      push:
        - meta_scope: meta.struct.dew
        - include: comments
        - match: \}
          scope: meta.block.dew punctuation.definition.block.end.dew
          pop: true
        - match: \{
          scope: punctuation.definition.block.begin.dew
          push:
            - meta_scope: meta.block.dew
            - match: '(?=\})'
              pop: true
            - match: (?:(,)|^)\s*(\*)?(?:{{identifier}}\.)*({{identifier}})\s*(?=$|"|`)
              captures:
                1: punctuation.separator.dew
                2: keyword.operator.dew
                3: variable.other.member.dew
            - match: (?:(,)|^)\s*({{identifier}})
              captures:
                1: punctuation.separator.dew
                2: variable.other.member.dew
            - include: types
            - include: comments
            - include: strings
            - include: anonymous-functions
    - match: \b(type)\s+({{identifier}})
      captures:
        1: storage.type.dew
        2: entity.name.type.dew
      push:
        - meta_scope: meta.type.dew
        - match: $
          pop: true
        - include: comments
        - include: types
        - include: anonymous-functions
        - include: keywords
        - include: late-keywords
    - include: expressions-late

  case-default:
    - match: '\b(default|case)\b'
      scope: keyword.control.dew
    - match: (,|:)
      scope: punctuation.separator.dew

  expressions:
    - include: expressions-early
    - include: expressions-late

  expressions-early:
    - include: case-default
    - include: keywords

  expressions-late:
    - include: comments
    - include: access
    - include: strings
    - include: char
    - include: types
    - include: anonymous-functions
    - include: late-keywords
    - include: operators
    - include: function-calls
    - include: builtins
    - match: \[
      scope: punctuation.definition.brackets.begin.dew
      push:
        - meta_scope: meta.brackets.dew
        - match: \]
          scope: punctuation.definition.brackets.end.dew
          pop: true
        - include: expressions
    - match: \(
      scope: punctuation.definition.group.begin.dew
      push:
        - meta_scope: meta.group.dew
        - match: \)
          scope: punctuation.definition.group.end.dew
          pop: true
        - include: expressions

  builtins:
    - match: \b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\b
      scope: support.function.builtin.dew

  imports:
    - match: '^\s*(import)\s+(?=")'
      scope: meta.import.dew
      captures:
        1: keyword.control.import.dew
      push:
        - meta_scope: meta.import.dew
        - include: strings
        - match: '$'
          pop: true
    - match: '^\s*(import)\s*(\()'
      captures:
        1: keyword.control.import.dew
        2: meta.group.dew punctuation.definition.group.begin.dew
      push:
        - meta_scope: meta.import.dew
        - meta_content_scope: meta.group.dew
        - match: '\)'
          scope: meta.group.dew punctuation.definition.group.end.dew
          pop: true
        - include: comments
        - include: strings

  access:
    - match: '(\.)({{identifier}})(?!\s*\()'
      captures:
        1: punctuation.accessor.dew
        2: variable.other.member.dew

  block:
    - match: '\{'
      scope: punctuation.definition.block.begin.dew
      push:
        - meta_scope: meta.block.dew
        - match: '\}'
          scope: punctuation.definition.block.end.dew
          pop: true
        - include: statements

  comments:
    # Special block comment e.g. "/*!expect-ast flag flag \n lisp */"
    - match: (/\*)(\!expect-typed-ast|\!expect-ast)\b
      captures:
        1: comment.block.dew
        2: keyword.control.dew
      push:
        - include: scope:source.lisp
        - meta_scope: source.lisp
        - match: \*/
          scope: comment.block.dew punctuation.definition.comment.end.dew
          pop: true

    # Special line comment e.g. "//!experiment what"
    - match: (//)(\!experiment)\s+(.+)
      captures:
        1: punctuation.definition.comment.dew
        2: keyword.control.dew
        3: meta.variable.dew
      push:
        - meta_scope: comment.line.dew
        - match: \S+
          scope: meta.annotation.dew
        # End the annotation scope at EOL, but stretch the comment scope
        # indefinitely to the right.
        - match: $
          set: pop-line-comment

    # Special block comment e.g. "/*!experiment what */"
    - match: (/\*)(\!experiment)\s+((?!\*/)+)
      captures:
        1: comment.block.dew
        2: keyword.control.dew
        3: meta.variable.dew
      push:
        - match: \*/
          scope: comment.block.dew punctuation.definition.comment.end.dew
          pop: true

    # Special line comment e.g. "//!name ..."
    - match: (//)(\!{{directive}})
      captures:
        1: punctuation.definition.comment.dew
        2: keyword.control.dew
      push:
        - meta_scope: comment.line.dew
        - match: \S+
          scope: meta.annotation.dew
        # End the annotation scope at EOL, but stretch the comment scope
        # indefinitely to the right.
        - match: $
          set: pop-line-comment

    # Special block comment e.g. "/*!something ... */"
    - match: (/\*)(\!{{directive}})
      captures:
        1: comment.block.dew
        2: keyword.control.dew
      push:
        - match: \*/
          scope: comment.block.dew punctuation.definition.comment.end.dew
          pop: true

    # Block comment
    - match: /\*
      scope: punctuation.definition.comment.dew
      push:
        - meta_scope: comment.block.dew
        - match: \*/
          scope: punctuation.definition.comment.dew
          pop: true
    - match: \*/
      scope: invalid.illegal.stray-comment-end.dew

    # Line comment
    - match: //
      scope: punctuation.definition.comment.dew
      push:
        - meta_scope: comment.line.double-slash.dew
        - match: \n
          pop: true

  # comments:
  #   # Special comment e.g. "#!name ..."
  #   - match: (#)(\!{{identifier}})
  #     captures:
  #       1: punctuation.definition.comment.dew
  #       2: meta.keyword.annotation.dew
  #     push:
  #       - meta_scope: comment.line.dew
  #       - match: \S+
  #         scope: meta.annotation.dew
  #       # End the annotation scope at EOL, but stretch the comment scope
  #       # indefinitely to the right.
  #       - match: $
  #         set: pop-line-comment

  #   # Special AST comment e.g. "#*!AST flag flag \n lisp *#"
  #   - match: (#\*)(\!AST)((\s+(?i:types|usecount|refs|attrs))*)
  #     captures:
  #       1: comment.block.dew
  #       2: keyword.control.dew
  #       3: meta.variable.function.dew
  #     push:
  #       - include: scope:source.lisp
  #       - meta_scope: source.lisp
  #       - match: \*#
  #         scope: comment.block.dew punctuation.definition.comment.end.dew
  #         pop: true

  #   # Special comment e.g. "#*!name ... *#"
  #   - match: (#\*)(\!{{identifier}})
  #     captures:
  #       1: punctuation.definition.comment.dew
  #       2: meta.keyword.annotation.dew
  #     push:
  #       - meta_scope: comment.block.dew
  #       - match: \*#
  #         scope: punctuation.definition.comment.end.dew
  #         pop: true
  #       - match: \!AST
  #         scope: keyword.control.dew
  #       - match: \S+
  #         scope: meta.annotation.dew
  #       - match: ^\s*(\*)(?!#)
  #         captures:
  #           1: punctuation.definition.comment.dew

  #   # Line comment
  #   - match: \#(?:[^\*]|$)
  #     scope: punctuation.definition.comment.dew
  #     push: pop-line-comment

  #   # General comment
  #   - match: \#\*
  #     scope: punctuation.definition.comment.begin.dew
  #     push:
  #       - meta_scope: comment.block.dew
  #       - match: \*#
  #         scope: punctuation.definition.comment.end.dew
  #         pop: true
  #       - match: ^\s*(\*)(?!#)
  #         captures:
  #           1: punctuation.definition.comment.dew

  pop-line-comment:
    - meta_scope: comment.line.dew
    # Including the newline allows the scope to visually stretch to the right,
    # and ensures that functionality that relies on comment scoping, such as
    # contextual hotkeys, works properly at EOL while typing a comment. This
    # should also match \r\n due to Sublime's internal normalization.
    - match: $\n?
      pop: true

  function-calls:
    - match: (\.)({{identifier}})\s*(\()
      captures:
        1: punctuation.accessor.dew
        2: variable.function.dew
        3: meta.group.dew punctuation.definition.group.begin.dew
      push:
        - meta_scope: meta.function-call.method.dew
        - meta_content_scope: meta.group.dew
        - match: \)
          scope: meta.group.dew punctuation.definition.group.end.dew
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      push:
        - meta_content_scope: meta.function-call.dew
        - include: builtins
        - match: '{{identifier}}'
          scope: variable.function.dew
        - match: '\('
          scope: meta.group.dew punctuation.definition.group.begin.dew
          set:
            - meta_scope: meta.function-call.dew
            - meta_content_scope: meta.group.dew
            - match: \)
              scope: meta.group.dew punctuation.definition.group.end.dew
              pop: true
            - include: expressions

  initializers:
    # Match multiple variable declarations inside of parens
    - match: \b(var|let)\s+(\()
      captures:
        1: storage.type.dew
        2: meta.group.dew punctuation.definition.group.begin.dew
      push:
        - meta_scope: meta.initialization.multiple.dew
        - meta_content_scope: meta.group.dew
        - match: \)
          scope: meta.group.dew punctuation.definition.group.end.dew
          pop: true
        - match: '^\s*({{identifier}})'
          captures:
            1: variable.other.dew
          push:
            - match: '\s*(,)\s*({{identifier}})'
              captures:
                1: punctuation.separator.dew
                2: variable.other.dew
            - match: ''
              pop: true
        - include: expressions
    # Match multiple constant declarations inside of parens
    - match: \b(const)\s+(\()
      captures:
        1: storage.type.dew
        2: meta.group.dew punctuation.definition.group.begin.dew
      push:
        - meta_content_scope: meta.group.dew
        - match: \)
          scope: meta.group.dew punctuation.definition.group.end.dew
          pop: true
        - match: '^\s*({{identifier}})'
          captures:
            1: entity.name.constant.dew
          push:
            - match: '\s*(,)\s*({{identifier}})'
              captures:
                1: punctuation.separator.dew
                2: entity.name.constant.dew
            - match: ''
              pop: true
        - include: expressions
    # Match a single constant
    - match: \b(const)b(?:\s+({{identifier}}))?
      captures:
        1: storage.type.dew
        2: entity.name.constant.dew
    # Matches the 'var x int = 0' style of variable declaration
    - match: '^\s*(var|let)\s+({{identifier}})'
      captures:
        1: storage.type.dew
        2: variable.other.dew
      push:
        - meta_scope: meta.initialization.explicit.dew
        - include: comments
        - match: '\s*(,)\s*({{identifier}})'
          captures:
            1: punctuation.separator.dew
            2: variable.other.dew
        - match: ''
          set:
            - meta_content_scope: meta.initialization.explicit.dew
            - match: '$'
              pop: true
            - include: expressions
    # Matches the 'x := 0' style of variable declaration
    - match: '({{identifier}})(?=(\s*,\s*{{identifier}})*\s*:=)'
      scope: variable.other.dew
      push:
        - meta_scope: meta.initialization.short.dew
        - include: comments
        - match: '\s*(,)\s*({{identifier}})'
          captures:
            1: punctuation.separator.dew
            2: variable.other.dew
        - match: ':='
          scope: keyword.operator.initialize.dew
          pop: true

  keywords:
    - match: \b(as|switch|continue|case|if|import|default|else|for|fallthrough|return|goto|break|while)\b
      scope: keyword.control.dew
    - match: \b(nil|true|false|iota|this)\b
      scope: constant.language.dew
    - match: '\b((0(x|X)\h*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b'
      scope: constant.numeric.dew

  late-keywords:
    - match: \b(chan|fun|type|map|var|let|const|pub)\b
      scope: storage.type.dew
    - match: \bmut\b
      scope: storage.modifier.dew

  operators:
    - match: '\|\|'
      scope: keyword.operator.dew
    - match: '&[&^]'
      scope: keyword.operator.dew
    - match: ':='
      scope: keyword.operator.initialize.dew
    - match: '[=!<>]='
      scope: keyword.operator.dew
    - match: <<|>>
      scope: keyword.operator.dew
    - match: <-|->
      scope: keyword.operator.channel.dew
    - match: '='
      scope: keyword.operator.assignment.dew
    - match: '[-/*&<>+|^%!]'
      scope: keyword.operator.dew

  types:
    - match: '\b(struct|interface)\b(?:(\{)(\}))?'
      captures:
        1: storage.type.dew
        2: meta.block.dew punctuation.definition.block.begin.dew
        3: meta.block.dew punctuation.definition.block.end.dew
    - match: (\[)(\d*)(\])(?=[[:alpha:]_])
      scope: meta.brackets.dew
      captures:
        1: punctuation.definition.brackets.begin.dew
        2: constant.numeric.dew
        3: punctuation.definition.brackets.end.dew
    - match: '\b(map)\b(\[)'
      captures:
        1: storage.type.dew
        2: meta.brackets.dew punctuation.definition.brackets.begin.dew
      push:
        - meta_content_scope: meta.brackets.dew
        - match: '(?=\s|$)'
          pop: true
        - match: \]
          scope: meta.brackets.dew punctuation.definition.brackets.end.dew
          pop: true
        - include: types
    - match: '(<-)?\b(chan)\b(<-)?(?=\s+[[:alpha:]_])'
      captures:
        1: keyword.operator.channel.dew
        2: storage.type.dew
        3: keyword.operator.channel.dew
    - include: basic-types

  basic-types:
    - match: '\bbool|u?int[\d]{,2}|float|error|str|char|any\b'
      scope: storage.type.dew

  functions:
    - include: reciever-function-begin
    - include: plain-function-begin
    - include: anonymous-functions
    - match: '\b(fun)\s+({{identifier}})'
      captures:
        1: storage.type.dew
        2: entity.name.function.dew

  anonymous-functions:
    - include: no-param-anonymous-function-begin
    - include: multi-param-anonymous-function-begin
    - include: single-param-anonymous-function-begin

  reciever-function-begin:
    - match: |-
        (?x)
        (fun)
        \s*
        # receiver declaration: (Type), (*Type), (t Type), (t *Type)
        (
          (\()
            (?:\s*({{identifier}})\s+)?
            (\*?)
            \s*
            {{identifier}}
            \s*
          (\))
        )
        \s*
        # name of function
        ( {{identifier}} )
        (?=\s*\()
      scope: meta.function.declaration.dew
      captures:
        1: storage.type.dew
        2: meta.group.dew
        3: punctuation.definition.group.begin.dew
        4: variable.parameter.receiver.dew
        5: keyword.operator.dew
        6: punctuation.definition.group.end.dew
        7: entity.name.function.dew
      push: function-params

  plain-function-begin:
    - match: |-
        (?x)
        (fun)
        \s*
        # name of function
        ( {{identifier}} )
        (?=\s*\()
      scope: meta.function.declaration.dew
      captures:
        1: storage.type.dew
        2: entity.name.function.dew
      push: function-params

  no-param-anonymous-function-begin:
    - match: |-
        (?x)
        (fun)
        (\s*)
        ((\()\s*(\)))
        (\s*)
      captures:
        1: meta.function.declaration.anonymous.dew storage.type.dew
        2: meta.function.dew
        3: meta.function.parameters.dew meta.group.dew
        4: punctuation.definition.group.begin.dew
        5: punctuation.definition.group.end.dew
        6: meta.function.dew
      push: function-return-type

  multi-param-anonymous-function-begin:
    - match: |-
        (?x)
        (fun)
        (\s*)
        # param list with at least one comma: (t Type, ...)
        (?=\(.*,)
      scope: meta.function.declaration.anonymous.dew
      captures:
        1: meta.function.declaration.anonymous.dew storage.type.dew
        2: meta.function.dew
      push: function-params

  single-param-anonymous-function-begin:
    - match: |-
        (?x)
        (fun)
        (\s*)
        (?=
          # single param: (t Type)
          \([^,)]+\)
          \s*
          # return type: Type, (Type), (Type, Type2)
          (
            \({{type_chars}}+\)
            |
            {{type_chars}}
          )?
          \s*
          (\{|$)
        )
      captures:
        1: meta.function.declaration.anonymous.dew storage.type.dew
        2: meta.function.dew
      push: function-params

  function-params:
    - match: (\s*)(\()(\s*)(!?(mut)\s+(this)|(this)|)
      captures:
        1: meta.function.dew
        2: meta.function.parameters.dew meta.group.dew punctuation.definition.group.begin.dew
        3: meta.function.parameters.dew meta.group.dew
        5: storage.modifier.dew
        6: constant.language.dew
        7: constant.language.dew
      # Create a temporary context to handle the initial parameter if it does
      # not include a type
      set: function-params-param-name

  function-params-param-name:
    # If the first thing is an identifier followed by a comma or a comment
    # and then a comma, it is a parameter that shares a type with a later
    # parameter
    - meta_content_scope: meta.function.parameters.dew meta.group.dew
    - match: \s+(?=/\*)
    - include: comments
    - match: '\s*({{identifier}})(?=\s*,|\s*/\*.*?\*/\s*,)'
      captures:
        1: variable.parameter.dew
      set: function-params-other
    - match: ''
      set: function-params-other

  function-params-other:
    - meta_content_scope: meta.function.parameters.dew meta.group.dew
    - match: (?=\)\s*)
      set:
        - match: '(\))(\s*)'
          captures:
            1: meta.function.parameters.dew meta.group.dew punctuation.definition.group.end.dew
            2: meta.function.dew
          set: function-return-type
    - include: comments
    - match: '{{identifier}}(?=\s+[^\s,)])'
      scope: variable.parameter.dew
      set:
        - meta_content_scope: meta.function.parameters.dew meta.group.dew
        - match: '(?=\))'
          set: function-params-other
        - match: '(,)\s*'
          captures:
            1: punctuation.separator.dew
          set: function-params-param-name
        - include: types-group
    - include: types-group
    - match: ','
      scope: punctuation.separator.dew

  function-return-type:
    - meta_content_scope: meta.function.return-type.dew
    - match: '(?=\{)'
      set: function-body
    - include: types-group
    # Match an identifier so that is doesn't trigger an exit from the context
    - match: '{{identifier}}'
    - match: \(
      scope: meta.group.dew punctuation.definition.group.begin.dew
      set:
        - meta_content_scope: meta.function.return-type.dew meta.group.dew
        - match: '\)'
          scope: punctuation.definition.group.end.dew
          set: function-body
        - match: ','
          scope: punctuation.separator.dew
        - include: types-group
    # If a function declaration ends in a newline not in parens and not in a
    # block, it is a forward declaration
    - match: $
      pop: true
    # Exit for any other char, such as )
    - match: (?=\S)
      pop: true

  types-group:
    - include: comments
    - match: \*
      scope: keyword.operator.dew
    - include: types

  function-body:
    - match: $
      pop: true
    - match: (\s*)(\{)
      captures:
        1: meta.function.dew
        2: meta.function.dew meta.block.dew punctuation.definition.block.begin.dew
      set:
        - meta_content_scope: meta.function.dew meta.block.dew
        - match: \}
          scope: meta.function.dew meta.block.dew punctuation.definition.block.end.dew
          pop: true
        - include: statements

  string-escaped-char:
    - match: '\\(\\|[abfnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.dew
    - match: \\.
      scope: invalid.illegal.unknown-escape.dew

  string-placeholder:
    - match: |-
        (?x)%
            [#0\- +']*                                  # flags
            (\[\d+\])?                                  # field (argument #)
            [,;:_]?                                     # separator character (AltiVec)
            ((-?\d+)|(\[\d+\])?\*)?                     # minimum field width
            (\.((-?\d+)|(\[\d+\])?\*)?)?                # precision
            [diouxXDOUeEfFgGaAcCsSpqnvtTbyYhHmMzZ%]     # conversion type
      scope: constant.other.placeholder.dew
    - match: "%"
      scope: invalid.illegal.placeholder.dew

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.dew
      push:
        - meta_scope: string.quoted.double.dew
        - match: '"'
          scope: punctuation.definition.string.end.dew
          pop: true
        - include: string-placeholder
        - include: string-escaped-char
    - match: "`"
      scope: punctuation.definition.string.begin.dew
      push:
        - meta_scope: string.quoted.raw.dew
        - match: "`"
          scope: punctuation.definition.string.end.dew
          pop: true
        - include: string-placeholder
  char:
    - match: "'"
      scope: punctuation.definition.string.begin.dew
      push:
        - meta_scope: string.quoted.single.dew
        - match: "'"
          scope: punctuation.definition.string.end.dew
          pop: true
        - include: string-escaped-char

  data-section:
    - match: ^(#\!EOF)\b[^\n]*\n
      captures:
        0: meta.preprocessor.dew
        1: keyword.control.dew
      push:
        - meta_content_scope: text.plain
        - match: (?=<?xml|<(?i:html\b)|!DOCTYPE (?i:html\b))
          push:
            - meta_scope: text.html.embedded.dew
            - include: scope:text.html.basic
